'use strict';
'use babel';

/*
 * These migrations can take one of two forms, a direct move or a general function.
 *
 * Direct move:
 *   These objects have an array of `moves`, which
 *   are objects containing an `old` setting name and a `new` setting name.
 *   Any existing config found in the `old` name will be moved over to (and overwrite)
 *   the `new` key.
 *
 * Functions:
 *   These have a `migrate` function, which takes the
 *   current linter-eslint atom config as an argument, and can act on it however
 *   it needs to.
 */

const activeMigrations = [{
  added: 'January, 2018',
  description: 'Organized config settings into sections',
  moves: [{
    old: 'disableWhenNoEslintConfig',
    new: 'disabling.disableWhenNoEslintConfig'
  }, {
    old: 'fixOnSave',
    new: 'autofix.fixOnSave'
  }, {
    old: 'ignoreFixableRulesWhileTyping',
    new: 'autofix.ignoreFixableRulesWhileTyping'
  }, {
    old: 'rulesToDisableWhileFixing',
    new: 'autofix.rulesToDisableWhileFixing'
  }, {
    old: 'rulesToSilenceWhileTyping',
    new: 'disabling.rulesToSilenceWhileTyping'
  }, {
    old: 'disableEslintIgnore',
    new: 'advanced.disableEslintIgnore'
  }, {
    old: 'disableFSCache',
    new: 'advanced.disableFSCache'
  }, {
    old: 'showRuleIdInMessage',
    new: 'advanced.showRuleIdInMessage'
  }, {
    old: 'eslintrcPath',
    new: 'global.eslintrcPath'
  }, {
    old: 'advancedLocalNodeModules',
    new: 'advanced.localNodeModules'
  }, {
    old: 'eslintRulesDirs',
    new: 'advanced.eslintRulesDirs'
  }, {
    old: 'useGlobalEslint',
    new: 'global.useGlobalEslint'
  }, {
    old: 'globalNodePath',
    new: 'global.globalNodePath'
  }]
}, {
  added: 'September, 2017',
  description: 'Deprecated eslintRulesDir{String} option in favor of eslintRulesDirs{Array<String>}',
  migrate(config) {
    const oldRulesdir = config.eslintRulesDir;
    if (oldRulesdir) {
      const newRulesDirs = config.eslintRulesDirs;
      if (newRulesDirs.length === 0) {
        atom.config.set('linter-eslint.eslintRulesDirs', [oldRulesdir]);
      }
      atom.config.unset('linter-eslint.eslintRulesDir');
    }
  }
}];

/*
 * This function can be called when linter-eslint first activates in order to
 * ensure that the user's settings are up-to-date with the current version of
 * linter-eslint.  Ideally, we would call this only when upgrading to a new
 * version.
 */
function migrateConfigOptions(migrations = activeMigrations) {
  if (migrations.length) {
    const linterEslintConfig = atom.config.get('linter-eslint');
    migrations.forEach(migration => {
      if (migration.moves && Array.isArray(migration.moves)) {
        // Copy old settings over to the new ones, then unset the old setting keys
        migration.moves.forEach(move => {
          const oldSetting = linterEslintConfig[move.old];
          if (oldSetting !== undefined) {
            atom.config.set(`linter-eslint.${move.new}`, oldSetting);
            atom.config.unset(`linter-eslint.${move.old}`);
          }
        });
      } else if (typeof migration.migrate === 'function') {
        migration.migrate(linterEslintConfig);
      }
    });
  }
}

module.exports = migrateConfigOptions;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1pZ3JhdGUtY29uZmlnLW9wdGlvbnMuanMiXSwibmFtZXMiOlsiYWN0aXZlTWlncmF0aW9ucyIsImFkZGVkIiwiZGVzY3JpcHRpb24iLCJtb3ZlcyIsIm9sZCIsIm5ldyIsIm1pZ3JhdGUiLCJjb25maWciLCJvbGRSdWxlc2RpciIsImVzbGludFJ1bGVzRGlyIiwibmV3UnVsZXNEaXJzIiwiZXNsaW50UnVsZXNEaXJzIiwibGVuZ3RoIiwiYXRvbSIsInNldCIsInVuc2V0IiwibWlncmF0ZUNvbmZpZ09wdGlvbnMiLCJtaWdyYXRpb25zIiwibGludGVyRXNsaW50Q29uZmlnIiwiZ2V0IiwiZm9yRWFjaCIsIm1pZ3JhdGlvbiIsIkFycmF5IiwiaXNBcnJheSIsIm1vdmUiLCJvbGRTZXR0aW5nIiwidW5kZWZpbmVkIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtBQUFBOztBQUVBOzs7Ozs7Ozs7Ozs7Ozs7QUFjQSxNQUFNQSxtQkFBbUIsQ0FDdkI7QUFDRUMsU0FBTyxlQURUO0FBRUVDLGVBQWEseUNBRmY7QUFHRUMsU0FBTyxDQUNMO0FBQ0VDLFNBQUssMkJBRFA7QUFFRUMsU0FBSztBQUZQLEdBREssRUFJRjtBQUNERCxTQUFLLFdBREo7QUFFREMsU0FBSztBQUZKLEdBSkUsRUFPRjtBQUNERCxTQUFLLCtCQURKO0FBRURDLFNBQUs7QUFGSixHQVBFLEVBVUY7QUFDREQsU0FBSywyQkFESjtBQUVEQyxTQUFLO0FBRkosR0FWRSxFQWFGO0FBQ0RELFNBQUssMkJBREo7QUFFREMsU0FBSztBQUZKLEdBYkUsRUFnQkY7QUFDREQsU0FBSyxxQkFESjtBQUVEQyxTQUFLO0FBRkosR0FoQkUsRUFtQkY7QUFDREQsU0FBSyxnQkFESjtBQUVEQyxTQUFLO0FBRkosR0FuQkUsRUFzQkY7QUFDREQsU0FBSyxxQkFESjtBQUVEQyxTQUFLO0FBRkosR0F0QkUsRUF5QkY7QUFDREQsU0FBSyxjQURKO0FBRURDLFNBQUs7QUFGSixHQXpCRSxFQTRCRjtBQUNERCxTQUFLLDBCQURKO0FBRURDLFNBQUs7QUFGSixHQTVCRSxFQStCRjtBQUNERCxTQUFLLGlCQURKO0FBRURDLFNBQUs7QUFGSixHQS9CRSxFQWtDRjtBQUNERCxTQUFLLGlCQURKO0FBRURDLFNBQUs7QUFGSixHQWxDRSxFQXFDRjtBQUNERCxTQUFLLGdCQURKO0FBRURDLFNBQUs7QUFGSixHQXJDRTtBQUhULENBRHVCLEVBK0N2QjtBQUNFSixTQUFPLGlCQURUO0FBRUVDLGVBQWEscUZBRmY7QUFHRUksVUFBUUMsTUFBUixFQUFnQjtBQUNkLFVBQU1DLGNBQWNELE9BQU9FLGNBQTNCO0FBQ0EsUUFBSUQsV0FBSixFQUFpQjtBQUNmLFlBQU1FLGVBQWVILE9BQU9JLGVBQTVCO0FBQ0EsVUFBSUQsYUFBYUUsTUFBYixLQUF3QixDQUE1QixFQUErQjtBQUM3QkMsYUFBS04sTUFBTCxDQUFZTyxHQUFaLENBQWdCLCtCQUFoQixFQUFpRCxDQUFDTixXQUFELENBQWpEO0FBQ0Q7QUFDREssV0FBS04sTUFBTCxDQUFZUSxLQUFaLENBQWtCLDhCQUFsQjtBQUNEO0FBQ0Y7QUFaSCxDQS9DdUIsQ0FBekI7O0FBK0RBOzs7Ozs7QUFNQSxTQUFTQyxvQkFBVCxDQUE4QkMsYUFBYWpCLGdCQUEzQyxFQUE2RDtBQUMzRCxNQUFJaUIsV0FBV0wsTUFBZixFQUF1QjtBQUNyQixVQUFNTSxxQkFBcUJMLEtBQUtOLE1BQUwsQ0FBWVksR0FBWixDQUFnQixlQUFoQixDQUEzQjtBQUNBRixlQUFXRyxPQUFYLENBQW9CQyxTQUFELElBQWU7QUFDaEMsVUFBSUEsVUFBVWxCLEtBQVYsSUFBbUJtQixNQUFNQyxPQUFOLENBQWNGLFVBQVVsQixLQUF4QixDQUF2QixFQUF1RDtBQUNyRDtBQUNBa0Isa0JBQVVsQixLQUFWLENBQWdCaUIsT0FBaEIsQ0FBeUJJLElBQUQsSUFBVTtBQUNoQyxnQkFBTUMsYUFBYVAsbUJBQW1CTSxLQUFLcEIsR0FBeEIsQ0FBbkI7QUFDQSxjQUFJcUIsZUFBZUMsU0FBbkIsRUFBOEI7QUFDNUJiLGlCQUFLTixNQUFMLENBQVlPLEdBQVosQ0FBaUIsaUJBQWdCVSxLQUFLbkIsR0FBSSxFQUExQyxFQUE2Q29CLFVBQTdDO0FBQ0FaLGlCQUFLTixNQUFMLENBQVlRLEtBQVosQ0FBbUIsaUJBQWdCUyxLQUFLcEIsR0FBSSxFQUE1QztBQUNEO0FBQ0YsU0FORDtBQU9ELE9BVEQsTUFTTyxJQUFJLE9BQU9pQixVQUFVZixPQUFqQixLQUE2QixVQUFqQyxFQUE2QztBQUNsRGUsa0JBQVVmLE9BQVYsQ0FBa0JZLGtCQUFsQjtBQUNEO0FBQ0YsS0FiRDtBQWNEO0FBQ0Y7O0FBRURTLE9BQU9DLE9BQVAsR0FBaUJaLG9CQUFqQiIsImZpbGUiOiJtaWdyYXRlLWNvbmZpZy1vcHRpb25zLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL2ZlbGlwZS8uYXRvbS9wYWNrYWdlcy9saW50ZXItZXNsaW50L3NyYyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnXG5cbi8qXG4gKiBUaGVzZSBtaWdyYXRpb25zIGNhbiB0YWtlIG9uZSBvZiB0d28gZm9ybXMsIGEgZGlyZWN0IG1vdmUgb3IgYSBnZW5lcmFsIGZ1bmN0aW9uLlxuICpcbiAqIERpcmVjdCBtb3ZlOlxuICogICBUaGVzZSBvYmplY3RzIGhhdmUgYW4gYXJyYXkgb2YgYG1vdmVzYCwgd2hpY2hcbiAqICAgYXJlIG9iamVjdHMgY29udGFpbmluZyBhbiBgb2xkYCBzZXR0aW5nIG5hbWUgYW5kIGEgYG5ld2Agc2V0dGluZyBuYW1lLlxuICogICBBbnkgZXhpc3RpbmcgY29uZmlnIGZvdW5kIGluIHRoZSBgb2xkYCBuYW1lIHdpbGwgYmUgbW92ZWQgb3ZlciB0byAoYW5kIG92ZXJ3cml0ZSlcbiAqICAgdGhlIGBuZXdgIGtleS5cbiAqXG4gKiBGdW5jdGlvbnM6XG4gKiAgIFRoZXNlIGhhdmUgYSBgbWlncmF0ZWAgZnVuY3Rpb24sIHdoaWNoIHRha2VzIHRoZVxuICogICBjdXJyZW50IGxpbnRlci1lc2xpbnQgYXRvbSBjb25maWcgYXMgYW4gYXJndW1lbnQsIGFuZCBjYW4gYWN0IG9uIGl0IGhvd2V2ZXJcbiAqICAgaXQgbmVlZHMgdG8uXG4gKi9cbmNvbnN0IGFjdGl2ZU1pZ3JhdGlvbnMgPSBbXG4gIHtcbiAgICBhZGRlZDogJ0phbnVhcnksIDIwMTgnLFxuICAgIGRlc2NyaXB0aW9uOiAnT3JnYW5pemVkIGNvbmZpZyBzZXR0aW5ncyBpbnRvIHNlY3Rpb25zJyxcbiAgICBtb3ZlczogW1xuICAgICAge1xuICAgICAgICBvbGQ6ICdkaXNhYmxlV2hlbk5vRXNsaW50Q29uZmlnJyxcbiAgICAgICAgbmV3OiAnZGlzYWJsaW5nLmRpc2FibGVXaGVuTm9Fc2xpbnRDb25maWcnLFxuICAgICAgfSwge1xuICAgICAgICBvbGQ6ICdmaXhPblNhdmUnLFxuICAgICAgICBuZXc6ICdhdXRvZml4LmZpeE9uU2F2ZSdcbiAgICAgIH0sIHtcbiAgICAgICAgb2xkOiAnaWdub3JlRml4YWJsZVJ1bGVzV2hpbGVUeXBpbmcnLFxuICAgICAgICBuZXc6ICdhdXRvZml4Lmlnbm9yZUZpeGFibGVSdWxlc1doaWxlVHlwaW5nJ1xuICAgICAgfSwge1xuICAgICAgICBvbGQ6ICdydWxlc1RvRGlzYWJsZVdoaWxlRml4aW5nJyxcbiAgICAgICAgbmV3OiAnYXV0b2ZpeC5ydWxlc1RvRGlzYWJsZVdoaWxlRml4aW5nJ1xuICAgICAgfSwge1xuICAgICAgICBvbGQ6ICdydWxlc1RvU2lsZW5jZVdoaWxlVHlwaW5nJyxcbiAgICAgICAgbmV3OiAnZGlzYWJsaW5nLnJ1bGVzVG9TaWxlbmNlV2hpbGVUeXBpbmcnXG4gICAgICB9LCB7XG4gICAgICAgIG9sZDogJ2Rpc2FibGVFc2xpbnRJZ25vcmUnLFxuICAgICAgICBuZXc6ICdhZHZhbmNlZC5kaXNhYmxlRXNsaW50SWdub3JlJ1xuICAgICAgfSwge1xuICAgICAgICBvbGQ6ICdkaXNhYmxlRlNDYWNoZScsXG4gICAgICAgIG5ldzogJ2FkdmFuY2VkLmRpc2FibGVGU0NhY2hlJ1xuICAgICAgfSwge1xuICAgICAgICBvbGQ6ICdzaG93UnVsZUlkSW5NZXNzYWdlJyxcbiAgICAgICAgbmV3OiAnYWR2YW5jZWQuc2hvd1J1bGVJZEluTWVzc2FnZSdcbiAgICAgIH0sIHtcbiAgICAgICAgb2xkOiAnZXNsaW50cmNQYXRoJyxcbiAgICAgICAgbmV3OiAnZ2xvYmFsLmVzbGludHJjUGF0aCdcbiAgICAgIH0sIHtcbiAgICAgICAgb2xkOiAnYWR2YW5jZWRMb2NhbE5vZGVNb2R1bGVzJyxcbiAgICAgICAgbmV3OiAnYWR2YW5jZWQubG9jYWxOb2RlTW9kdWxlcydcbiAgICAgIH0sIHtcbiAgICAgICAgb2xkOiAnZXNsaW50UnVsZXNEaXJzJyxcbiAgICAgICAgbmV3OiAnYWR2YW5jZWQuZXNsaW50UnVsZXNEaXJzJ1xuICAgICAgfSwge1xuICAgICAgICBvbGQ6ICd1c2VHbG9iYWxFc2xpbnQnLFxuICAgICAgICBuZXc6ICdnbG9iYWwudXNlR2xvYmFsRXNsaW50J1xuICAgICAgfSwge1xuICAgICAgICBvbGQ6ICdnbG9iYWxOb2RlUGF0aCcsXG4gICAgICAgIG5ldzogJ2dsb2JhbC5nbG9iYWxOb2RlUGF0aCdcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBhZGRlZDogJ1NlcHRlbWJlciwgMjAxNycsXG4gICAgZGVzY3JpcHRpb246ICdEZXByZWNhdGVkIGVzbGludFJ1bGVzRGlye1N0cmluZ30gb3B0aW9uIGluIGZhdm9yIG9mIGVzbGludFJ1bGVzRGlyc3tBcnJheTxTdHJpbmc+fScsXG4gICAgbWlncmF0ZShjb25maWcpIHtcbiAgICAgIGNvbnN0IG9sZFJ1bGVzZGlyID0gY29uZmlnLmVzbGludFJ1bGVzRGlyXG4gICAgICBpZiAob2xkUnVsZXNkaXIpIHtcbiAgICAgICAgY29uc3QgbmV3UnVsZXNEaXJzID0gY29uZmlnLmVzbGludFJ1bGVzRGlyc1xuICAgICAgICBpZiAobmV3UnVsZXNEaXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGF0b20uY29uZmlnLnNldCgnbGludGVyLWVzbGludC5lc2xpbnRSdWxlc0RpcnMnLCBbb2xkUnVsZXNkaXJdKVxuICAgICAgICB9XG4gICAgICAgIGF0b20uY29uZmlnLnVuc2V0KCdsaW50ZXItZXNsaW50LmVzbGludFJ1bGVzRGlyJylcbiAgICAgIH1cbiAgICB9XG4gIH1cbl1cblxuLypcbiAqIFRoaXMgZnVuY3Rpb24gY2FuIGJlIGNhbGxlZCB3aGVuIGxpbnRlci1lc2xpbnQgZmlyc3QgYWN0aXZhdGVzIGluIG9yZGVyIHRvXG4gKiBlbnN1cmUgdGhhdCB0aGUgdXNlcidzIHNldHRpbmdzIGFyZSB1cC10by1kYXRlIHdpdGggdGhlIGN1cnJlbnQgdmVyc2lvbiBvZlxuICogbGludGVyLWVzbGludC4gIElkZWFsbHksIHdlIHdvdWxkIGNhbGwgdGhpcyBvbmx5IHdoZW4gdXBncmFkaW5nIHRvIGEgbmV3XG4gKiB2ZXJzaW9uLlxuICovXG5mdW5jdGlvbiBtaWdyYXRlQ29uZmlnT3B0aW9ucyhtaWdyYXRpb25zID0gYWN0aXZlTWlncmF0aW9ucykge1xuICBpZiAobWlncmF0aW9ucy5sZW5ndGgpIHtcbiAgICBjb25zdCBsaW50ZXJFc2xpbnRDb25maWcgPSBhdG9tLmNvbmZpZy5nZXQoJ2xpbnRlci1lc2xpbnQnKVxuICAgIG1pZ3JhdGlvbnMuZm9yRWFjaCgobWlncmF0aW9uKSA9PiB7XG4gICAgICBpZiAobWlncmF0aW9uLm1vdmVzICYmIEFycmF5LmlzQXJyYXkobWlncmF0aW9uLm1vdmVzKSkge1xuICAgICAgICAvLyBDb3B5IG9sZCBzZXR0aW5ncyBvdmVyIHRvIHRoZSBuZXcgb25lcywgdGhlbiB1bnNldCB0aGUgb2xkIHNldHRpbmcga2V5c1xuICAgICAgICBtaWdyYXRpb24ubW92ZXMuZm9yRWFjaCgobW92ZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IG9sZFNldHRpbmcgPSBsaW50ZXJFc2xpbnRDb25maWdbbW92ZS5vbGRdXG4gICAgICAgICAgaWYgKG9sZFNldHRpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYXRvbS5jb25maWcuc2V0KGBsaW50ZXItZXNsaW50LiR7bW92ZS5uZXd9YCwgb2xkU2V0dGluZylcbiAgICAgICAgICAgIGF0b20uY29uZmlnLnVuc2V0KGBsaW50ZXItZXNsaW50LiR7bW92ZS5vbGR9YClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBtaWdyYXRpb24ubWlncmF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBtaWdyYXRpb24ubWlncmF0ZShsaW50ZXJFc2xpbnRDb25maWcpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1pZ3JhdGVDb25maWdPcHRpb25zXG4iXX0=