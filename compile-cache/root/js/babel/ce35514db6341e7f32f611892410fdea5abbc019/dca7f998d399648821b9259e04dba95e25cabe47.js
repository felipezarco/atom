Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _atom = require('atom');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _client = require('./client');

var _client2 = _interopRequireDefault(_client);

var _viewsTreeView = require('./views/tree-view');

var _viewsTreeView2 = _interopRequireDefault(_viewsTreeView);

var _viewsStatusBar = require('./views/status-bar');

var _viewsStatusBar2 = _interopRequireDefault(_viewsStatusBar);

var _helpers = require('./helpers');

var _menusMain = require('./menus/main');

var _menusMain2 = _interopRequireDefault(_menusMain);

var _configSchemaJson = require('./config-schema.json');

var _configSchemaJson2 = _interopRequireDefault(_configSchemaJson);

var _remoteStorage = require('./remote-storage');

var _remoteStorage2 = _interopRequireDefault(_remoteStorage);

'use babel';

exports['default'] = {

  config: _configSchemaJson2['default'],
  client: null,
  coreTreeView: null,
  treeView: null,
  statusBarTile: null,
  statusBarView: null,
  subscriptions: null,

  activate: function activate(state) {
    var _this = this;

    this.storage = new _remoteStorage2['default'](state);

    if (this.subscriptions) {
      this.deactivate();
    }

    this.config = _configSchemaJson2['default'];
    this.client = new _client2['default']();
    atom.project.remoteftpMain = this; // change remoteftp to object containing client and main?
    atom.project.remoteftp = this.client;
    this.treeView = new _viewsTreeView2['default'](this.storage);

    this.subscriptions = new _atom.CompositeDisposable();
    this.subscriptions.add(atom.workspace.observeTextEditors(function (editor) {
      _this.subscriptions.add(editor.onDidSave(function (event) {
        return _this.fileSaved(event);
      }));
    }), atom.project.onDidChangePaths(function () {
      if (!(0, _helpers.hasProject)() || !_this.client.isConnected()) return;

      atom.commands.dispatch(atom.views.getView(atom.workspace), 'remote-ftp:disconnect');
      atom.commands.dispatch(atom.views.getView(atom.workspace), 'remote-ftp:connect');
    }), atom.workspace.paneContainers.left.onDidChangeActivePaneItem(function (activeItem) {
      if (_this.treeView !== activeItem) return;

      _this.storage.data.options.treeViewSide = 'left';
    }), atom.workspace.paneContainers.right.onDidChangeActivePaneItem(function (activeItem) {
      if (_this.treeView !== activeItem) return;

      _this.storage.data.options.treeViewSide = 'right';
    }), atom.workspace.paneContainers.bottom.onDidChangeActivePaneItem(function (activeItem) {
      if (_this.treeView !== activeItem) return;

      _this.storage.data.options.treeViewSide = 'bottom';
    }), atom.config.onDidChange('remote-ftp.tree.enableDragAndDrop', function (value) {
      if (value.newValue) {
        _this.createTreeViewEvents();
      } else {
        _this.dropTreeViewEvents();
      }
    }));

    if (atom.config.get('remote-ftp.tree.enableDragAndDrop')) {
      this.createTreeViewEvents();
    }

    this.client.onDidConnected(function () {
      _this.treeView.root.name.attr('data-name', _path2['default'].basename(_this.client.root.remote));
      _this.treeView.root.name.attr('data-path', _this.client.root.remote);

      // .ftpignore initialize
      _this.client.updateIgnore();
    });

    // NOTE: if there is a project folder & show view on startup
    //  is true, show the Remote FTP sidebar
    if ((0, _helpers.hasProject)()) {
      // NOTE: setTimeout is for when multiple hosts option is true
      setTimeout(function () {
        var conf = new _atom.File(_this.client.getConfigPath());

        conf.exists().then(function (exists) {
          if (exists && atom.config.get('remote-ftp.tree.showViewOnStartup')) {
            _this.treeView.attach();
          }
        })['catch'](function (error) {
          var err = error.reason ? error.reason : error.message;

          atom.notifications.addWarning(err);
        });
      }, 0);
    }

    // NOTE: Adds commands to context menus and atom.commands
    (0, _menusMain2['default'])();
  },

  createTreeViewEvents: function createTreeViewEvents() {
    var _this2 = this;

    var coreTreeViewElemDragStart = function coreTreeViewElemDragStart(e) {
      var target = e.target.querySelector('.name');
      var localPaths = {
        fullPath: target.getAttribute('data-path'),
        name: target.getAttribute('data-name')
      };

      e.dataTransfer.setData('localPaths', JSON.stringify(localPaths));
      e.dataTransfer.effectAllowed = 'move';
    };

    var coreTreeViewElemDrop = function coreTreeViewElemDrop(e) {
      var pathInfos = e.dataTransfer.getData('pathInfos');

      if (pathInfos.length > 0) {
        var remotePath = JSON.parse(pathInfos);
        var newPathInfo = e.target.querySelector('span[data-path]').getAttribute('data-path');
        var destPath = _path2['default'].join(newPathInfo, remotePath.name);

        if (Object.keys(remotePath).length === 0) {
          console.warn('Empty ', remotePath);
        }

        _this2.client.downloadTo(remotePath.fullPath, destPath, true, function (err) {
          if (err) {
            console.warn(err);
          }
        });
      }
    };

    this.coreTreeViewEvents = {
      coreTreeViewElemDragStart: coreTreeViewElemDragStart,
      coreTreeViewElemDrop: coreTreeViewElemDrop
    };

    atom.packages.activatePackage('tree-view').then(function (treeView) {
      _this2.coreTreeView = treeView.mainModule.getTreeViewInstance();

      if (typeof _this2.coreTreeView.element === 'undefined') {
        return;
      }

      _this2.coreTreeView.element.addEventListener('dragstart', _this2.coreTreeViewEvents.coreTreeViewElemDragStart);
      _this2.coreTreeView.element.addEventListener('drop', _this2.coreTreeViewEvents.coreTreeViewElemDrop);
    });
  },

  dropTreeViewEvents: function dropTreeViewEvents() {
    if (this.coreTreeView && this.coreTreeView.element && this.coreTreeViewEvents) {
      this.coreTreeView.element.removeEventListener('dragstart', this.coreTreeViewEvents.coreTreeViewElemDragStart);
      this.coreTreeView.element.removeEventListener('drop', this.coreTreeViewEvents.coreTreeViewElemDrop);

      delete this.coreTreeViewEvents;
      this.coreTreeView = null;
    }
  },

  deactivate: function deactivate() {
    this.subscriptions.dispose();
    this.destroyStatusBar();

    if (this.client) this.client.disconnect();
    if (this.treeView) this.treeView.detach();

    this.dropTreeViewEvents();

    this.client = null;
    this.treeView = null;

    delete atom.project.remoteftpMain;
    delete atom.project.remoteftp;
  },

  fileSaved: function fileSaved(text) {
    if (!(0, _helpers.hasProject)()) return;

    if (!this.storage.data.options.autosave) return;
    if (atom.config.get('remote-ftp.connector.autoUploadOnSave') === 'never') return;

    if (!this.client.isConnected() && atom.config.get('remote-ftp.connector.autoUploadOnSave') !== 'always') return;

    var local = text.path;

    if (!atom.project.contains(local)) return;

    // Read config if undefined
    if (!this.client.ftpConfigPath) {
      this.client.readConfig();
    }

    if (this.client.ftpConfigPath !== this.client.getConfigPath()) return;

    // .ftpignore filter
    if (this.client.checkIgnore(local)) return;

    if (local === this.client.getConfigPath()) return;
    // TODO: Add fix for files which are uploaded from a glob selector
    // don't upload files watched, they will be uploaded by the watcher
    // doesn't work fully with new version of watcher
    if (this.client.watch.files.indexOf(local) >= 0) return;

    // get file name for notification message
    var uploadedItem = atom.workspace.getActiveTextEditor().getFileName();

    this.client.upload(local, function (err) {
      if (atom.config.get('remote-ftp.notifications.enableTransfer')) {
        if (err) {
          atom.notifications.addError('Remote FTP: ' + uploadedItem + ' could not upload.');
        } else {
          atom.notifications.addSuccess('Remote FTP: ' + uploadedItem + ' uploaded.');
        }
      }
    });
  },

  serialize: function serialize() {
    return this.storage.data;
  },

  consumeElementIcons: function consumeElementIcons(fn) {
    (0, _helpers.setIconHandler)(fn);
    return new _atom.Disposable(function () {
      (0, _helpers.setIconHandler)(null);
    });
  },

  setStatusbar: function setStatusbar(statusBar) {
    var _this3 = this;

    this.destroyStatusBar(statusBar);

    this.subscriptions.add(atom.config.onDidChange('remote-ftp.statusbar.enable', function () {
      _this3.setStatusbar(statusBar);
    }));

    if (!atom.config.get('remote-ftp.statusbar.enable')) return;

    this.statusBarView = new _viewsStatusBar2['default']();

    var options = {
      item: this.statusBarView,
      priority: atom.config.get('remote-ftp.statusbar.priority')
    };

    if (atom.config.get('remote-ftp.statusbar.position') === 'left') {
      this.statusBarTile = statusBar.addLeftTile(options);
    } else {
      this.statusBarTile = statusBar.addRightTile(options);
    }

    this.subscriptions.add(atom.config.onDidChange('remote-ftp.statusbar.position', function () {
      _this3.setStatusbar(statusBar);
    }), atom.config.onDidChange('remote-ftp.statusbar.priority', function () {
      _this3.setStatusbar(statusBar);
    }));
  },

  destroyStatusBar: function destroyStatusBar() {
    if (this.statusBarTile) {
      this.statusBarTile.destroy();
      this.statusBarTile = null;
    }

    if (this.statusBarView) {
      this.statusBarView.dispose();
      this.statusBarView = null;
    }
  },

  consumeStatusBar: function consumeStatusBar(statusBar) {
    this.setStatusbar(statusBar);
  }

};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,