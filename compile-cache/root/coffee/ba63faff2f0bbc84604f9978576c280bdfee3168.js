(function() {
  module.exports = {
    xmlparser: {
      name: "xml",
      trigger: /<\/$/,
      test: /^</,
      parse: function(text) {
        var match, result;
        result = {
          opening: false,
          closing: false,
          selfClosing: false,
          element: '',
          type: this.name,
          length: 0
        };
        match = text.match(/^<(\/)?([^\s\/<>!][^\s\/<>]*)(\s+([\w-:\[\]\(\)\*\@\#]+)(=["'`{]([\S\s]*?)["'`}])?)*\s*(\/)?>/i);
        if (match) {
          result.element = match[2];
          result.length = match[0].length;
          if (this.emptyTags.indexOf(result.element.toLowerCase()) > -1) {
            result.selfClosing = true;
          } else {
            result.opening = match[1] || match[7] ? false : true;
            result.closing = match[1] ? true : false;
            result.selfClosing = match[7] ? true : false;
          }
          return result;
        } else {
          return null;
        }
      },
      getPair: function(tagDescriptor) {
        return "</" + tagDescriptor.element + ">";
      },
      emptyTags: []
    },
    xmlcdataparser: {
      name: 'xml-cdata',
      trigger: /\]\]$/,
      test: /^(<!\[|]]>)/,
      parse: function(text) {
        var match, result;
        result = {
          opening: false,
          closing: false,
          selfClosing: false,
          element: 'xml-cdata',
          type: this.name,
          length: 0
        };
        match = text.match(/(<!\[CDATA\[)|(\]\]>)/i);
        if (match) {
          result.length = match[0].length;
          result.opening = match[1] ? true : false;
          result.closing = match[2] ? true : false;
          return result;
        } else {
          return null;
        }
      },
      getPair: function() {
        return "]]>";
      }
    },
    xmlcommentparser: {
      name: 'xml-comment',
      trigger: function(text) {
        var match;
        match = text.match(/(<!-{1,3})$|(--)$/);
        if (match && match[2]) {
          return match[2];
        } else {
          return null;
        }
      },
      test: /^(<!--|-->)/,
      parse: function(text) {
        var match, result;
        result = {
          opening: false,
          closing: false,
          selfClosing: false,
          element: 'xml-comment',
          type: this.name,
          length: 0
        };
        match = text.match(/(<!--|-->)/);
        if (match) {
          result.length = match[0].length;
          result.opening = match[1] === '<!--' ? true : false;
          result.closing = match[1] === '-->' ? true : false;
          return result;
        } else {
          return null;
        }
      },
      getPair: function() {
        return "-->";
      }
    },
    underscoretemplateparser: {
      name: 'underscore-template',
      trigger: null,
      test: /<%=.+?%>/,
      parse: function(text) {
        return {
          type: this.name,
          selfClosing: true,
          length: text.match(this.test)[0].length
        };
      },
      getPair: null
    },
    phpechoparser: {
      name: 'php-echo-shorthand',
      trigger: null,
      test: /<\?=.+?\?>/,
      parse: function(text) {
        var match;
        match = text.match(this.test);
        if (!match) {
          return null;
        }
        return {
          opening: false,
          closing: false,
          selfClosing: true,
          element: 'php-echo-shorthand',
          type: this.name,
          length: match[0].length
        };
      },
      getPair: null
    },
    mustacheparser: {
      name: 'mustache',
      trigger: /\{\{\/$/,
      test: /^{{[\^\/#]/,
      parse: function(text) {
        var match, result;
        result = {
          opening: false,
          closing: false,
          selfClosing: false,
          element: '',
          type: this.name,
          length: 0
        };
        match = text.match(/\{\{([#\/])([^\s]+?)(\s+?([^\s]+?))?(\s)*?\}\}/i);
        if (match) {
          result.opening = match[1] === '#' ? true : false;
          result.closing = !result.opening;
          result.element = match[2];
          result.length = match[0].length;
          return result;
        } else {
          return null;
        }
      },
      getPair: function(tagDescriptor) {
        return "{{/" + tagDescriptor.element + (!this.omitClosingBraces ? "}}" : "");
      },
      omitClosingBraces: false
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
