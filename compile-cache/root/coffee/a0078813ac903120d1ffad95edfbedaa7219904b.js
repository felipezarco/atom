(function() {
  var CompositeDisposable;

  CompositeDisposable = require("atom").CompositeDisposable;

  module.exports = {
    subscriptions: null,
    key: "activate-power-mode.particles.colours",
    conf: [],
    golden_ratio_conjugate: 0.618033988749895,
    init: function() {
      this.initConfigSubscribers();
      return this.initList();
    },
    disable: function() {
      var ref, ref1;
      if ((ref = this.subscriptions) != null) {
        ref.dispose();
      }
      if ((ref1 = this.colorList) != null) {
        ref1.dispose();
      }
      return this.colorList = null;
    },
    observe: function(key) {
      return this.subscriptions.add(atom.config.observe(this.key + "." + key, (function(_this) {
        return function(value) {
          return _this.conf[key] = value;
        };
      })(this)));
    },
    initConfigSubscribers: function() {
      this.subscriptions = new CompositeDisposable;
      this.observe('type');
      this.observe('fixed');
      return this.observe('randomType');
    },
    hsvToRgb: function(h, s, v) {
      var c, h2, h3, m, x;
      c = v * s;
      h2 = (360.0 * h) / 60.0;
      h3 = Math.abs((h2 % 2) - 1.0);
      x = c * (1.0 - h3);
      m = v - c;
      if ((0 <= h2 && h2 < 1)) {
        return [c + m, x + m, m];
      }
      if ((1 <= h2 && h2 < 2)) {
        return [x + m, c + m, m];
      }
      if ((2 <= h2 && h2 < 3)) {
        return [m, c + m, x + m];
      }
      if ((3 <= h2 && h2 < 4)) {
        return [m, x + m, c + m];
      }
      if ((4 <= h2 && h2 < 5)) {
        return [x + m, m, c + m];
      }
      if ((5 <= h2 && h2 < 6)) {
        return [c + m, m, x + m];
      }
    },
    getFixedColorGenerator: function*() {
      var c, color;
      c = this.conf['fixed'];
      color = "rgb(" + c.red + "," + c.green + "," + c.blue + ")";
      while (true) {
        yield color;
      }
    },
    getRandomBrightColor: function() {
      var b, g, r, rgb;
      this.seed += this.golden_ratio_conjugate;
      this.seed = this.seed - (Math.floor(this.seed / 1));
      rgb = this.hsvToRgb(this.seed, 1, 1);
      r = Math.floor((rgb[0] * 255) / 1);
      g = Math.floor((rgb[1] * 255) / 1);
      b = Math.floor((rgb[2] * 255) / 1);
      return "rgb(" + r + "," + g + "," + b + ")";
    },
    getRandomAllColor: function() {
      var b, g, r;
      r = Math.floor(Math.random() * 256);
      g = Math.floor(Math.random() * 256);
      b = Math.floor(Math.random() * 256);
      return "rgb(" + r + "," + g + "," + b + ")";
    },
    getRandomGenerator: function*() {
      if (this.conf['randomType'] === 'bright') {
        this.seed = Math.random();
        while (true) {
          yield this.getRandomBrightColor();
        }
      } else {
        while (true) {
          yield this.getRandomAllColor();
        }
      }
    },
    getRandomSpawnGenerator: function*() {
      var color;
      if (this.conf['randomType'] === 'bright') {
        this.seed = Math.random();
        color = this.getRandomBrightColor();
      } else {
        color = this.getRandomAllColor();
      }
      while (true) {
        yield color;
      }
    },
    getColorAtCursorGenerator: function*(cursor, editorElement) {
      var color;
      color = this.getColorAtCursor(cursor, editorElement);
      while (true) {
        yield color;
      }
    },
    getColorAtCursor: function(cursor, editorElement) {
      var el, error, scope;
      scope = cursor.getScopeDescriptor();
      scope = scope.toString().replace(/\./g, '.syntax--');
      try {
        el = editorElement.querySelector(scope);
      } catch (error1) {
        error = error1;
        "rgb(255, 255, 255)";
      }
      if (el) {
        return getComputedStyle(el).color;
      } else {
        return "rgb(255, 255, 255)";
      }
    },
    generateColors: function(cursor, editorElement) {
      var colorType;
      colorType = this.conf['type'];
      if (colorType === 'random') {
        return this.getRandomGenerator();
      } else if (colorType === 'fixed') {
        return this.getFixedColorGenerator();
      } else if (colorType === 'randomSpawn') {
        return this.getRandomSpawnGenerator();
      } else {
        return this.getColorAtCursorGenerator(cursor, editorElement);
      }
    },
    selectColor: function(code) {
      return atom.config.set(this.key + ".type", code);
    },
    initList: function() {
      if (this.colorList != null) {
        return;
      }
      this.colorList = require("./color-list");
      this.colorList.init(this);
      return this.subscriptions.add(atom.commands.add("atom-workspace", {
        "activate-power-mode:select-color": (function(_this) {
          return function() {
            return _this.colorList.toggle();
          };
        })(this)
      }));
    }
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,
