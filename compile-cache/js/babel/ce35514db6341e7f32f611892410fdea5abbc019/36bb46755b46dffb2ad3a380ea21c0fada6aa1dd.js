Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.checkTarget = checkTarget;
exports.recursiveViewDestroy = recursiveViewDestroy;
exports.resolveHome = resolveHome;
exports.mkdirSyncRecursive = mkdirSyncRecursive;
exports.statsToPermissions = statsToPermissions;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _os = require('os');

var _os2 = _interopRequireDefault(_os);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _atomSpacePenViews = require('atom-space-pen-views');

var _viewsDirectoryView = require('./views/directory-view');

var _viewsDirectoryView2 = _interopRequireDefault(_viewsDirectoryView);

'use babel';

var addIconToElement = undefined;

var checkIgnoreRemote = function checkIgnoreRemote(item) {
  return item && (item.name.attr('data-path') === '/' || !atom.project.remoteftp.checkIgnore(item.name.attr('data-path')));
};
exports.checkIgnoreRemote = checkIgnoreRemote;
var checkIgnoreLocal = function checkIgnoreLocal(item) {
  return !atom.project.remoteftp.checkIgnore(item);
};
exports.checkIgnoreLocal = checkIgnoreLocal;
var checkPaths = function checkPaths(index, elem) {
  return elem.getPath ? elem.getPath() : '';
};
exports.checkPaths = checkPaths;
var hasProject = function hasProject() {
  return atom.project && atom.project.getPaths().length;
};
exports.hasProject = hasProject;
var multipleHostsEnabled = function multipleHostsEnabled() {
  return atom.config.get('remote-ftp.beta.multipleHosts');
};
exports.multipleHostsEnabled = multipleHostsEnabled;
var hasOwnProperty = function hasOwnProperty(_ref) {
  var obj = _ref.obj;
  var prop = _ref.prop;
  return Object.prototype.hasOwnProperty.call(obj, prop);
};
exports.hasOwnProperty = hasOwnProperty;
var splitPaths = function splitPaths(path) {
  return path.replace(/^\/+/, '').replace(/\/+$/, '').split('/');
};

exports.splitPaths = splitPaths;
var simpleSort = function simpleSort(a, b) {
  if (a.name === b.name) {
    return 0;
  }

  return a.name > b.name ? 1 : -1;
};

exports.simpleSort = simpleSort;
var simpleSortDepth = function simpleSortDepth(a, b) {
  if (a.depth === b.depth) {
    return 0;
  }

  return a.depth > b.depth ? -1 : 1;
};

exports.simpleSortDepth = simpleSortDepth;
var sortDepth = function sortDepth(a, b) {
  if (a.depth === b.depth) {
    return 0;
  }

  return a.depth > b.depth ? 1 : -1;
};

exports.sortDepth = sortDepth;
var countDepth = function countDepth(file) {
  file.depth = file.name.replace(/\\/g, '/').split('/').length;
};

exports.countDepth = countDepth;
var getObject = function getObject(_ref2) {
  var keys = _ref2.keys;
  var obj = _ref2.obj;

  if (!(keys instanceof Array)) throw new Error('keys is not an array');
  if (typeof obj !== 'object') throw new Error('obj is not an object');

  return keys.reduce(function (ret, key) {
    if (ret && hasOwnProperty({ obj: ret, prop: key })) return ret[key];
    return false;
  }, obj);
};

exports.getObject = getObject;
var setIconHandler = function setIconHandler(fn) {
  addIconToElement = fn;
};

exports.setIconHandler = setIconHandler;
var getIconHandler = function getIconHandler() {
  return addIconToElement;
};

exports.getIconHandler = getIconHandler;
var elapsedTime = function elapsedTime(milliseconds) {
  var ms = milliseconds;

  var days = Math.floor(ms / 86400000);
  ms %= 86400000;
  var hours = Math.floor(ms / 3600000);
  ms %= 3600000;
  var mins = Math.floor(ms / 60000);
  ms %= 60000;
  var secs = Math.floor(ms / 1000);
  ms %= 1000;

  return ((days ? days + 'd ' : '') + (hours ? (days && hours < 10 ? '0' : '') + hours + 'h ' : '') + (mins ? ((days || hours) && mins < 10 ? '0' : '') + mins + 'm ' : '') + (secs ? ((days || hours || mins) && secs < 10 ? '0' : '') + secs + 's ' : '')).replace(/^[dhms]\s+/, '').replace(/[dhms]\s+[dhms]/g, '').replace(/^\s+/, '').replace(/\s+$/, '') || '0s';
};

exports.elapsedTime = elapsedTime;
var separateRemoteItems = function separateRemoteItems(folder) {
  if (!folder) return false;

  var list = [];
  var filter = function filter(item) {
    if (item.name === '.' || item.name === '..') return;

    if (item.type !== 'd' && item.type !== 'l') {
      item.type = 'f';
    }

    list.push(item);
  };

  folder.forEach(filter);

  return list;
};

exports.separateRemoteItems = separateRemoteItems;
var logger = function logger(text) {
  console.log(text);
};

exports.logger = logger;
var localFilePrepare = function localFilePrepare(fileName, currentPath) {
  var file = undefined;
  var queue = undefined;

  if (fileName !== '.' && fileName !== '..') {
    var fullName = _path2['default'].join(currentPath, fileName);

    var stats = _fs2['default'].statSync(fullName);
    file = {
      name: fullName,
      size: stats.size,
      date: stats.mtime,
      type: stats.isFile() ? 'f' : 'd'
    };

    if (!stats.isFile()) {
      queue = fullName;
    }
  }

  return { file: file, queue: queue };
};

exports.localFilePrepare = localFilePrepare;
var traverseTree = function traverseTree(localPath, callback) {
  var list = [localFilePrepare('', localPath).file];
  var queue = [localPath];

  // search all files in localPath recursively
  while (queue.length > 0) {
    var currentPath = _path2['default'].normalize(queue.pop());

    if (!_fs2['default'].existsSync(currentPath)) {
      _fs2['default'].closeSync(_fs2['default'].openSync(currentPath, 'w'));
    }

    var filesFound = _fs2['default'].readdirSync(currentPath);

    var localFile = undefined;
    for (var i = 0; i < filesFound.length; i++) {
      localFile = localFilePrepare(filesFound[i], currentPath);
      list.push(localFile.file);

      if (localFile.queue) {
        queue.push(localFile.queue);
      }
    }
  }

  // depth counting & sorting
  list.forEach(countDepth);
  list.sort(sortDepth);

  // callback
  if (typeof callback === 'function') callback.apply(null, [list]);
};

exports.traverseTree = traverseTree;
var validateConfig = function validateConfig(data, configFileName) {
  try {
    // try to parse the json
    JSON.parse(data);
    return true;
  } catch (error) {
    (function () {
      // try to extract bad syntax location from error message
      var lineNumber = -1;
      var index = undefined;
      var regex = /at position ([0-9]+)$/;
      var result = error.message.match(regex);
      if (result && result.length > 0) {
        var cursorPos = parseInt(result[1], 10);
        // count lines until syntax error position
        var tmp = data.substr(0, cursorPos);
        for (lineNumber = -1, index = 0; index !== -1; lineNumber++, index = tmp.indexOf('\n', index + 1));
      }

      // show notification
      atom.notifications.addError('Could not parse `' + configFileName + '`', {
        detail: '' + error.message,
        dismissable: false
      });

      // open .ftpconfig file and mark the faulty line
      atom.workspace.open(configFileName).then(function (editor) {
        if (lineNumber === -1) return; // no line number to mark

        var decorationConfig = {
          'class': 'ftpconfig_line_error'
        };

        editor.getDecorations(decorationConfig).forEach(function (decoration) {
          decoration.destroy();
        });

        var range = editor.getBuffer().clipRange([[lineNumber, 0], [lineNumber, Infinity]]);

        var marker = editor.markBufferRange(range, {
          invalidate: 'inside'
        });

        decorationConfig.type = 'line';
        editor.decorateMarker(marker, decorationConfig);
      });
    })();
  }

  // return false, as the json is not valid
  return false;
};

exports.validateConfig = validateConfig;
var resolveTree = function resolveTree(path) {
  var views = (0, _atomSpacePenViews.$)('.remote-ftp-view [data-path="' + path + '"]');

  return views.map(function (err, item) {
    return (0, _atomSpacePenViews.$)(item).view() || null;
  }).get(0);
};

exports.resolveTree = resolveTree;
var getSelectedTree = function getSelectedTree() {
  var views = (0, _atomSpacePenViews.$)('.remote-ftp-view .selected');

  return views.map(function (err, item) {
    return (0, _atomSpacePenViews.$)(item).view() || null;
  }).get();
};

exports.getSelectedTree = getSelectedTree;

function checkTarget(e) {
  var disableRoot = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

  var view = (0, _atomSpacePenViews.$)(e.currentTarget).view();
  var hasProjectRoot = view.hasClass('project-root');
  var hasProjectRootHeader = (0, _atomSpacePenViews.$)(e.target).hasClass('project-root-header');

  if (!view || view instanceof _viewsDirectoryView2['default'] === false) return false;
  if (disableRoot && hasProjectRoot && !hasProjectRootHeader) return false;

  return true;
}

function recursiveViewDestroy(view) {
  view.getItemViews().folders.forEach(function (fView) {
    recursiveViewDestroy(fView);
    fView.destroy();
  });
}

function resolveHome(path) {
  return _path2['default'].normalize(path.replace('~', _os2['default'].homedir()));
}

function mkdirSyncRecursive(path) {
  var sep = _path2['default'].sep;
  var initDir = _path2['default'].isAbsolute(path) ? sep : '';

  path.split(sep).reduce(function (parentDir, childDir) {
    var curDir = _path2['default'].resolve(parentDir, childDir);
    if (!_fs2['default'].existsSync(curDir)) _fs2['default'].mkdirSync(curDir);

    return curDir;
  }, initDir);
}

function statsToPermissions(stats) {
  /* eslint no-bitwise: 0 */
  var PER_OTHER = { 1: 'x', 2: 'w', 4: 'r' };
  var PER_GROUP = { 8: 'x', 16: 'w', 32: 'r' };
  var PER_OWNER = { 64: 'x', 128: 'w', 256: 'r' };

  return {
    other: Object.keys(PER_OTHER).map(function (elem) {
      return stats.mode & elem ? PER_OTHER[elem] : '';
    }).reverse().join(''),
    group: Object.keys(PER_GROUP).map(function (elem) {
      return stats.mode & elem ? PER_GROUP[elem] : '';
    }).reverse().join(''),
    user: Object.keys(PER_OWNER).map(function (elem) {
      return stats.mode & elem ? PER_OWNER[elem] : '';
    }).reverse().join('')
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,