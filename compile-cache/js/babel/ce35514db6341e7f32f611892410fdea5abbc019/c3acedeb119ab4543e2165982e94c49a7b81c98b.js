Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _outlineSelectionView = require('./outline-selection-view');

var _outlineSelectionView2 = _interopRequireDefault(_outlineSelectionView);

var _configSchema = require('./config-schema');

var _configSchema2 = _interopRequireDefault(_configSchema);

//import { CompositeDisposable } from 'atom';

'use babel';

var outlineWidth = 0;
var outlineRadius = 0;
// save previous width in case pixelRectForScreenRange width is zero
var prevSelectionWidth = 0;
var isUpdatingOutline = false;

exports['default'] = {
  //subscriptions: null,
  config: _configSchema2['default'],

  activate: function activate(state) {
    atom.workspace.observeTextEditors(function (editor) {
      var editorView = atom.views.getView(editor);

      editor.observeSelections(function (selection) {
        selection.outline = new _outlineSelectionView2['default']();
        _updateOutlineStyle(selection);
        selection.outline.attach(editorView);
        _updateOutline(selection);
      });
      editor.onDidChangeSelectionRange(function (event) {
        event.selection.outline.attach(editorView); // reattach in case DOM refreshed #9
        _updateOutline(event.selection);
      });
      editorView.onDidChangeScrollTop(function () {
        var selections = editor.getSelections();
        for (var selection of selections) {
          selection.outline.attach(editorView); // reattach in case DOM refreshed #9
          _updateOutline(selection);
        }
      });
      editorView.onDidChangeScrollLeft(function () {
        var selections = editor.getSelections();
        for (var selection of selections) {
          selection.outline.attach(editorView); // reattach in case DOM refreshed #9
          _updateOutline(selection);
        }
      });
      atom.config.onDidChange('outline-selection', function () {
        var selections = editor.getSelections();
        for (var selection of selections) {
          _updateOutlineStyle(selection);
        }
      });
      editor.onDidRemoveSelection(function (selection) {
        if (selection.outline) {
          selection.outline.destroy();
          selection.outline = null;
        }
      });
    });
  },

  deactivate: function deactivate() {
    //this.outlineSelectionView.destroy();
  }

};

/**
 * Updates the CSS styling on the outline. Gets the values from the config.
 * @param  {Selection} selection The selection to update the style of. The
 *                               selection should contain an outline object.
 */
function _updateOutlineStyle(selection) {
  if (!selection.outline) {
    console.log('Selection did not have an outline associated with it. No style update.');
    return;
  }

  outlineWidth = atom.config.get('outline-selection.outlineWidth');
  var outlineStyle = atom.config.get('outline-selection.outlineStyle');
  var outlineColor = atom.config.get('outline-selection.outlineColor');
  var outlineOpacity = atom.config.get('outline-selection.outlineOpacity');
  outlineRadius = atom.config.get('outline-selection.outlineRadius');

  selection.outline.setStyle(outlineWidth + 'px ' + outlineStyle + ' rgba(' + outlineColor.red + ',' + outlineColor.green + ',' + outlineColor.blue + ',' + outlineColor.alpha + ')', outlineOpacity);
}

/**
 * Updates the size and position of the outline. Hides the outline when no
 * seleciton exists.
 * @param  {Selection} selection The selection to update the size and position
 *                               of. The selection should contain an outline
 *                               object.
 */
function _updateOutline(selection) {
  if (isUpdatingOutline) {
    // don't call this function if it is already executing #6
    return;
  }
  isUpdatingOutline = true;

  if (!selection.outline) {
    console.log('Selection did not have an outline associated with it. No size/position update.');
    return;
  }

  var selectionRange = selection.getScreenRange();
  if (selectionRange.start.row == selectionRange.end.row && selectionRange.start.column == selectionRange.end.column) {
    // hide when there is no selection
    selection.outline.hide();
  } else {
    // show and reposition when there is a selection
    selection.outline.show();

    var editorView = selection.outline.getView();
    var lineHeight = selection.editor.getLineHeightInPixels();
    var editorScroll = {
      top: editorView.getScrollTop(),
      bottom: editorView.getScrollBottom(),
      left: editorView.getScrollLeft(),
      right: editorView.getScrollRight(),
      width: editorView.getScrollWidth()
    };
    var selectionStartPosition = editorView.pixelPositionForScreenPosition(selectionRange.start);
    var selectionEndPosition = editorView.pixelPositionForScreenPosition(selectionRange.end);

    if (selectionRange.start.row == selectionRange.end.row) {
      // single line selection
      // CALCULATE POSITION
      var topPosition = {
        top: selectionStartPosition.top - editorScroll.top - outlineWidth,
        left: selectionStartPosition.left - editorScroll.left - outlineWidth
      };
      var bottomPosition = {
        top: selectionStartPosition.top - editorScroll.top,
        left: selectionStartPosition.left - editorScroll.left
      };
      var leftPosition = {
        top: selectionStartPosition.top - editorScroll.top + lineHeight,
        left: selectionStartPosition.left - outlineWidth
      };
      var rightPosition = {
        top: selectionStartPosition.top - editorScroll.top - outlineWidth,
        left: selectionEndPosition.left - editorScroll.left
      };

      // CALCULATE SIZE
      var topSize = {
        width: selectionEndPosition.left - selectionStartPosition.left + outlineWidth,
        height: lineHeight + outlineWidth
      };
      var bottomSize = {
        width: selectionEndPosition.left - selectionStartPosition.left,
        height: lineHeight
      };
      var leftSize = {
        width: 0,
        height: lineHeight
      };
      var rightSize = {
        width: 0,
        height: lineHeight
      };

      // FIX SPECIFIC SCENARIO
      if (selectionStartPosition.left == 0) {
        // selection from start of line
        topPosition.left = selectionStartPosition.left - editorScroll.left;
        topSize.width = selectionEndPosition.left - selectionStartPosition.left;
      }

      // SET POSITION AND SIZE
      selection.outline.setPosition(topPosition, bottomPosition, leftPosition, rightPosition);
      selection.outline.setSize(topSize, bottomSize, leftSize, rightSize);
      selection.outline.setRadius(outlineRadius, true);
      selection.outline.hideSides();
    } else if (selectionRange.start.row != selectionRange.end.row) {
      // multi line selection
      // CALCULATE POSITION
      var topPosition = {
        top: selectionStartPosition.top - editorScroll.top - outlineWidth,
        left: selectionStartPosition.left - editorScroll.left - outlineWidth,
        right: editorScroll.right - editorScroll.width + outlineWidth
      };
      var bottomPosition = {
        top: selectionEndPosition.top - editorScroll.top,
        left: 0 - editorScroll.left
      };
      var leftPosition = {
        top: selectionStartPosition.top - editorScroll.top + lineHeight - outlineWidth,
        left: 0 - editorScroll.left
      };
      var rightPosition = {
        top: selectionStartPosition.top - editorScroll.top,
        left: selectionEndPosition.left - editorScroll.left - outlineWidth,
        right: editorScroll.right - editorScroll.width + outlineWidth
      };

      // CALCULATE SIZE
      var topSize = {
        height: lineHeight
      };
      var bottomSize = {
        width: selectionEndPosition.left,
        height: lineHeight
      };
      var leftSize = {
        width: Math.max(0, selectionStartPosition.left),
        height: selectionEndPosition.top - selectionStartPosition.top
      };
      var rightSize = {
        height: selectionEndPosition.top - selectionStartPosition.top
      };

      // FIX SPECIFIC SCENARIOS
      if (selectionStartPosition.left == 0) {
        // selection from start of line
        topPosition.left = 0 - editorScroll.left;
      } else if (selectionRange.end.row - selectionRange.start.row == 1 && selectionStartPosition.left > selectionEndPosition.left) {
        // disconnected selection
        rightPosition.left = selectionStartPosition.left - editorScroll.left;
        topSize.height = lineHeight + outlineWidth;
        leftSize.width = selectionEndPosition.left;
      }

      // SET POSITION AND SIZE
      selection.outline.setPosition(topPosition, bottomPosition, leftPosition, rightPosition);
      selection.outline.setSize(topSize, bottomSize, leftSize, rightSize);
      selection.outline.setRadius(outlineRadius, false);
    }
  }
  isUpdatingOutline = false;
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,